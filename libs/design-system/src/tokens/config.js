const StyleDictionary = require('style-dictionary');
const path = require('path');

// Custom transforms for different platforms
StyleDictionary.registerTransform({
  name: 'size/px',
  type: 'value',
  matcher: (token) => {
    return token.attributes.category === 'size';
  },
  transformer: (token) => {
    return parseFloat(token.original.value) + 'px';
  }
});

StyleDictionary.registerTransform({
  name: 'size/flutter',
  type: 'value',
  matcher: (token) => {
    return token.attributes.category === 'size';
  },
  transformer: (token) => {
    return parseFloat(token.original.value);
  }
});

StyleDictionary.registerTransform({
  name: 'color/css',
  type: 'value',
  matcher: (token) => {
    return token.attributes.category === 'color';
  },
  transformer: (token) => {
    const { h, s, l, a } = token.original.value;
    if (a && a < 1) {
      return `hsla(${h}, ${s}%, ${l}%, ${a})`;
    }
    return `hsl(${h}, ${s}%, ${l}%)`;
  }
});

StyleDictionary.registerTransform({
  name: 'color/flutter',
  type: 'value',
  matcher: (token) => {
    return token.attributes.category === 'color';
  },
  transformer: (token) => {
    const { h, s, l, a = 1 } = token.original.value;
    // Convert HSL to Flutter Color format
    const hslToRgb = (h, s, l) => {
      s /= 100;
      l /= 100;
      const c = (1 - Math.abs(2 * l - 1)) * s;
      const x = c * (1 - Math.abs((h / 60) % 2 - 1));
      const m = l - c / 2;
      let r, g, b;
      
      if (0 <= h && h < 60) {
        r = c; g = x; b = 0;
      } else if (60 <= h && h < 120) {
        r = x; g = c; b = 0;
      } else if (120 <= h && h < 180) {
        r = 0; g = c; b = x;
      } else if (180 <= h && h < 240) {
        r = 0; g = x; b = c;
      } else if (240 <= h && h < 300) {
        r = x; g = 0; b = c;
      } else if (300 <= h && h < 360) {
        r = c; g = 0; b = x;
      }
      
      r = Math.round((r + m) * 255);
      g = Math.round((g + m) * 255);
      b = Math.round((b + m) * 255);
      
      return { r, g, b };
    };
    
    const { r, g, b } = hslToRgb(h, s, l);
    const alpha = Math.round(a * 255);
    
    return `Color.fromARGB(${alpha}, ${r}, ${g}, ${b})`;
  }
});

// Custom format for CSS custom properties
StyleDictionary.registerFormat({
  name: 'css/variables',
  formatter: ({ dictionary }) => {
    return `:root {\n${dictionary.allTokens
      .map(token => `  --${token.name}: ${token.value};`)
      .join('\n')}\n}`;
  }
});

// Custom format for TypeScript constants
StyleDictionary.registerFormat({
  name: 'typescript/es6-declarations',
  formatter: ({ dictionary }) => {
    return `// Design Tokens - Auto-generated\n// Do not edit this file directly\n\nexport const tokens = {\n${dictionary.allTokens
      .map(token => `  ${token.name}: '${token.value}',`)
      .join('\n')}\n} as const;\n\nexport type DesignToken = keyof typeof tokens;`;
  }
});

// Custom format for Flutter Dart
StyleDictionary.registerFormat({
  name: 'flutter/class.dart',
  formatter: ({ dictionary }) => {
    return `// Design Tokens - Auto-generated\n// Do not edit this file directly\n\nimport 'package:flutter/material.dart';\n\nclass DesignTokens {\n${dictionary.allTokens
      .map(token => `  static const ${token.name} = ${token.value};`)
      .join('\n')}\n}`;
  }
});

// Build configuration
module.exports = {
  source: ['src/tokens/**/*.json'],
  platforms: {
    // Web CSS
    css: {
      transformGroup: 'css',
      transforms: ['attribute/cti', 'name/cti/kebab', 'color/css', 'size/px'],
      buildPath: 'dist/tokens/css/',
      files: [
        {
          destination: 'variables.css',
          format: 'css/variables'
        },
        {
          destination: 'tokens.css',
          format: 'css/variables'
        }
      ]
    },
    
    // SCSS
    scss: {
      transformGroup: 'scss',
      transforms: ['attribute/cti', 'name/cti/kebab', 'color/css', 'size/px'],
      buildPath: 'dist/tokens/scss/',
      files: [
        {
          destination: '_variables.scss',
          format: 'scss/variables'
        }
      ]
    },
    
    // JavaScript/TypeScript
    js: {
      transformGroup: 'js',
      transforms: ['attribute/cti', 'name/cti/camel', 'color/css', 'size/px'],
      buildPath: 'dist/tokens/js/',
      files: [
        {
          destination: 'tokens.js',
          format: 'javascript/es6'
        },
        {
          destination: 'tokens.d.ts',
          format: 'typescript/es6-declarations'
        }
      ]
    },
    
    // React Native / Expo
    reactNative: {
      transformGroup: 'js',
      transforms: ['attribute/cti', 'name/cti/camel', 'color/css', 'size/flutter'],
      buildPath: 'dist/tokens/react-native/',
      files: [
        {
          destination: 'tokens.js',
          format: 'javascript/es6'
        }
      ]
    },
    
    // Flutter
    flutter: {
      transforms: ['attribute/cti', 'name/cti/camel', 'color/flutter', 'size/flutter'],
      buildPath: 'dist/tokens/flutter/',
      files: [
        {
          destination: 'design_tokens.dart',
          format: 'flutter/class.dart'
        }
      ]
    },
    
    // JSON for documentation
    json: {
      transforms: ['attribute/cti', 'name/cti/kebab', 'color/css', 'size/px'],
      buildPath: 'dist/tokens/json/',
      files: [
        {
          destination: 'tokens.json',
          format: 'json/nested'
        },
        {
          destination: 'tokens-flat.json',
          format: 'json/flat'
        }
      ]
    }
  }
};
