version: '3.8'

services:
  # Security & Compliance Suite Dashboard
  security-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
    volumes:
      - ./reports:/app/reports
      - ./configs:/app/configs
      - /var/run/docker.sock:/var/run/docker.sock # For container scanning
    networks:
      - security-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ZAP DAST Scanner
  zap-scanner:
    image: owasp/zap2docker-stable:latest
    ports:
      - "8081:8080"
    environment:
      - ZAP_PROXY_PORT=8080
    volumes:
      - ./reports/zap:/zap/wrk
    networks:
      - security-net
    profiles:
      - tools
    command: zap-baseline.py -t http://security-dashboard:8080 -J zap-report.json

  # Vulnerability Database
  vuln-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=vulnerability_db
      - POSTGRES_USER=vuln_user
      - POSTGRES_PASSWORD=vuln_pass
    volumes:
      - vuln_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - security-net
    profiles:
      - database
    restart: unless-stopped

  # Redis for Rate Limiting & Caching
  redis-cache:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - security-net
    profiles:
      - cache
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - security-net
    profiles:
      - monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - security-net
    profiles:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Audit Log Collector
  audit-collector:
    image: fluent/fluent-bit:latest
    volumes:
      - ./reports/audit:/fluent-bit/audit
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    networks:
      - security-net
    profiles:
      - logging
    restart: unless-stopped
    depends_on:
      - security-dashboard

  # Semgrep SAST Scanner
  semgrep-scanner:
    image: returntocorp/semgrep:latest
    volumes:
      - ./:/src
      - ./reports/semgrep:/output
    networks:
      - security-net
    profiles:
      - tools
    working_dir: /src
    command: >
      sh -c '
        semgrep --config=auto --json --output=/output/semgrep-results.json /src
        echo "Semgrep scan completed"
      '

  # Container Security Scanner
  trivy-scanner:
    image: aquasec/trivy:latest
    volumes:
      - ./reports/trivy:/output
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - security-net
    profiles:
      - tools
    command: >
      sh -c '
        trivy image --format json --output /output/trivy-report.json security-dashboard:latest
        echo "Trivy container scan completed"
      '

networks:
  security-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  vuln_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local