name: React Native + Web Hybrid CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.1'

jobs:
  # Install dependencies and setup
  setup:
    name: Setup and Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      nx-cache-key: ${{ steps.nx-cache.outputs.cache-hit }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Nx
        id: nx-cache
        uses: actions/cache@v3
        with:
          path: .nx/cache
          key: nx-${{ github.sha }}
          restore-keys: |
            nx-${{ github.base_ref }}-
            nx-main-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

  # Lint and type checking
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Restore Nx cache
        uses: actions/cache@v3
        with:
          path: .nx/cache
          key: nx-${{ github.sha }}
          restore-keys: |
            nx-${{ github.base_ref }}-
            nx-main-
      
      - name: Lint all projects
        run: npx nx run-many -t lint --parallel
      
      - name: Type check all projects
        run: npx nx run-many -t type-check --parallel

  # Test shared components
  test-shared:
    name: Test Shared Components
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Test shared components
        run: npx nx test shared-components
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: packages/shared-components/coverage/lcov.info
          flags: shared-components

  # Build web application
  build-web:
    name: Build Web Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-shared]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Build web application
        run: npx nx build web
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_APP_ENV: production
      
      - name: Run web tests
        run: npx nx test web
      
      - name: Upload web build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/.next/
          retention-days: 7
      
      - name: Bundle analysis
        run: npx nx analyze web
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: web-bundle-analysis
          path: apps/web/.next/analyze/
          retention-days: 7

  # Build Android
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-shared]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            apps/mobile/android/.gradle
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      
      - name: Build Android bundle
        run: |
          cd apps/mobile
          npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle
      
      - name: Build Android APK
        run: |
          cd apps/mobile/android
          ./gradlew assembleRelease
      
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: apps/mobile/android/app/build/outputs/apk/release/
          retention-days: 7

  # Build iOS
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [lint-and-typecheck, test-shared]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: apps/mobile/ios/Pods
          key: pods-${{ hashFiles('**/Podfile.lock') }}
      
      - name: Install CocoaPods
        run: |
          cd apps/mobile/ios
          pod install --repo-update
      
      - name: Build iOS bundle
        run: |
          cd apps/mobile
          npx react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios/bundle/main.jsbundle
      
      - name: Build iOS (no codesign)
        run: |
          cd apps/mobile
          xcodebuild -workspace ios/HybridApp.xcworkspace \
            -scheme HybridApp \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath ios/build/HybridApp.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            archive
      
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: apps/mobile/ios/build/
          retention-days: 7

  # E2E Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-web]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/.next/
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npx nx test:e2e web
      
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-reports
          path: apps/web/test-results/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
      
      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Deploy web to staging
  deploy-web-staging:
    name: Deploy Web to Staging
    runs-on: ubuntu-latest
    needs: [build-web, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/.next/
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy web to production
  deploy-web-production:
    name: Deploy Web to Production
    runs-on: ubuntu-latest
    needs: [build-web, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/.next/
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy mobile to app stores
  deploy-mobile:
    name: Deploy Mobile to App Stores
    runs-on: macos-latest
    needs: [build-android, build-ios, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      
      - name: Install Fastlane
        run: |
          cd apps/mobile
          bundle install
      
      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: apps/mobile/android/app/build/outputs/apk/release/
      
      - name: Deploy to Google Play
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        run: |
          cd apps/mobile
          bundle exec fastlane android deploy
      
      - name: Deploy to App Store
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd apps/mobile
          bundle exec fastlane ios deploy

  # Performance monitoring
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [deploy-web-staging, deploy-web-production]
    if: always() && (needs.deploy-web-staging.result == 'success' || needs.deploy-web-production.result == 'success')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}