apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{projectName}}-api
  labels:
    app: {{projectName}}-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{projectName}}-api
  template:
    metadata:
      labels:
        app: {{projectName}}-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api
        image: {{projectName}}:latest
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: health
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{projectName}}-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{projectName}}-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{projectName}}-secrets
              key: jwt-secret
        - name: SERVER_HOST
          value: "0.0.0.0"
        - name: SERVER_PORT
          value: "3000"
        - name: METRICS_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9090"
        - name: HEALTH_ENABLED
          value: "true"
        - name: HEALTH_PORT
          value: "8080"
        - name: RATE_LIMITING_ENABLED
          value: "true"
        - name: RATE_LIMITING_RPS
          value: "{{rateLimitRps}}"
        - name: PERFORMANCE_TARGET_RPS
          value: "48000"
        - name: RUST_LOG
          value: "info"
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      imagePullPolicy: IfNotPresent

---
apiVersion: v1
kind: Service
metadata:
  name: {{projectName}}-api-service
  labels:
    app: {{projectName}}-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: health
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: {{projectName}}-api

---
apiVersion: v1
kind: Service
metadata:
  name: {{projectName}}-api-loadbalancer
  labels:
    app: {{projectName}}-api
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app: {{projectName}}-api
  loadBalancerSourceRanges:
  - 0.0.0.0/0

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{projectName}}-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{projectName}}-api
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{projectName}}-api-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: {{projectName}}-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{projectName}}-api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.{{projectName}}.com
    secretName: {{projectName}}-api-tls
  rules:
  - host: api.{{projectName}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{projectName}}-api-service
            port:
              number: 80