// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Additional user fields
  role          String?
  company       String?
  useCase       String?
  experience    String?
  goals         String[]
  
  // Subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  // Usage tracking
  totalTokensUsed        Int       @default(0)
  totalChats            Int       @default(0)
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  chats                 Chat[]
  apiKeys               ApiKey[]
  documents             Document[]
  knowledgeBases        KnowledgeBase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id          String   @id @default(cuid())
  title       String?
  userId      String
  messages    Message[]
  tokensUsed  Int      @default(0)
  model       String   @default("gpt-3.5-turbo")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String   // "user", "assistant", "system"
  content   String   @db.Text
  tokens    Int?
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  stripeCustomerId  String    @unique
  stripeSubscriptionId String @unique
  stripePriceId     String
  status            String    // active, canceled, incomplete, incomplete_expired, past_due, trialing, unpaid
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Usage {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "chat", "api", "tokens"
  amount      Int
  metadata    Json?
  date        DateTime @default(now())
}

enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Document {
  id            String   @id @default(cuid())
  title         String
  content       String?  // Store original content (optional)
  source        String   // File path, URL, or source identifier
  type          String   // 'pdf', 'web', 'text', etc.
  url           String?  // Original URL if web document
  size          Int?     // File size in bytes
  wordCount     Int?     // Number of words
  language      String?  // Detected language
  status        String   @default("processing") // 'processing', 'completed', 'failed'
  errorMessage  String?  // Error details if processing failed
  tags          String[] // User-defined tags
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  processedAt   DateTime? // When processing completed

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chunks DocumentChunk[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([type])
}

model DocumentChunk {
  id           String @id @default(cuid())
  text         String @db.Text
  chunkIndex   Int
  startChar    Int
  endChar      Int
  vectorId     String? // ID in vector database
  embeddingGenerated Boolean @default(false)
  createdAt    DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([vectorId])
  @@index([embeddingGenerated])
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  settings    Json?    // Configuration settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
}