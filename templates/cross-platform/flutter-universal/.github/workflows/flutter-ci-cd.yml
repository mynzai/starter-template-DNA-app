name: Flutter Universal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Code quality and testing
  analyze_and_test:
    name: Analyze and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze project source
        run: dart analyze --fatal-infos
        
      - name: Run widget tests
        run: flutter test --coverage
        
      - name: Generate coverage report
        run: |
          sudo apt-get update -qq -y
          sudo apt-get install -y lcov
          lcov --remove coverage/lcov.info 'lib/generated/*' 'lib/**/*.g.dart' 'lib/**/*.freezed.dart' -o coverage/lcov.info
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: flutter

  # Android builds
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Build App Bundle
        run: flutter build appbundle --release
        
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          
      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab

  # iOS builds
  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Build iOS (No Codesign)
        run: flutter build ios --release --no-codesign
        
      - name: Create IPA
        run: |
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload
          zip -r app-release.ipa Payload
          
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: build/ios/iphoneos/app-release.ipa

  # Web build
  build_web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build Web
        run: flutter build web --release
        
      - name: Upload Web artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: build/web/

  # Windows build
  build_windows:
    name: Build Windows
    runs-on: windows-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
        
      - name: Build Windows
        run: flutter build windows --release
        
      - name: Create Windows installer
        run: |
          powershell Compress-Archive build/windows/runner/Release/* windows-app.zip
          
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: windows-app.zip

  # macOS build
  build_macos:
    name: Build macOS
    runs-on: macos-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop
        
      - name: Build macOS
        run: flutter build macos --release
        
      - name: Create DMG
        run: |
          cd build/macos/Build/Products/Release
          zip -r macos-app.zip flutter_universal_suite.app
          
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-build
          path: build/macos/Build/Products/Release/macos-app.zip

  # Linux build
  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            liblzma-dev libstdc++-12-dev
            
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop
        
      - name: Build Linux
        run: flutter build linux --release
        
      - name: Create Linux archive
        run: |
          cd build/linux/x64/release/bundle
          tar -czf linux-app.tar.gz *
          
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: build/linux/x64/release/bundle/linux-app.tar.gz

  # Integration tests
  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Enable Linux desktop for testing
        run: flutter config --enable-linux-desktop
        
      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            liblzma-dev xvfb
            
      - name: Run integration tests
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          flutter test integration_test/

  # Security scanning
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # App Store deployment (iOS)
  deploy_ios:
    name: Deploy to App Store
    runs-on: macos-latest
    needs: [build_ios, integration_test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATES }}
          p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD }}
          
      - name: Download Provisioning Profiles
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: 'com.example.flutter_universal_suite'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          
      - name: Build and deploy to App Store
        run: |
          flutter build ios --release
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist
            
      - name: Upload to App Store Connect
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: 'ios/build/Runner.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  # Google Play deployment (Android)
  deploy_android:
    name: Deploy to Google Play
    runs-on: ubuntu-latest
    needs: [build_android, integration_test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          
      - name: Build signed App Bundle
        run: flutter build appbundle --release
        
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.example.flutter_universal_suite
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: production
          status: completed

  # Web deployment
  deploy_web:
    name: Deploy Web
    runs-on: ubuntu-latest
    needs: [build_web, integration_test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: build/web/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/web/

  # Desktop releases
  create_desktop_release:
    name: Create Desktop Release
    runs-on: ubuntu-latest
    needs: [build_windows, build_macos, build_linux, integration_test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all desktop artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          files: |
            windows-build/windows-app.zip
            macos-build/macos-app.zip
            linux-build/linux-app.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}